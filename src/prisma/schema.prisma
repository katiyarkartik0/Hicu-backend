generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_SQL_DATABASE_URL")
}

model Account {
  id      Int             @id @default(autoincrement())
  name    String
  members AccountMember[]

  description String?
  website     String?
  svgIcon     String?

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  configurations      Configurations[]
  Prospect            Prospect[]
  IgCommentAutomation IgCommentAutomation[]
  IgDmAutomation      IgDmAutomation[]
  Leads               Leads[]
}

model Member {
  id       Int             @id @default(autoincrement())
  name     String?
  email    String          @unique
  password String
  accounts AccountMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccountMember {
  id Int @id @default(autoincrement())

  accountId Int
  memberId  Int

  status MemberStatus @default(INVITED)
  scope  String[]

  account Account @relation(fields: [accountId], references: [id])
  member  Member  @relation(fields: [memberId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([accountId, memberId])
}

enum MemberStatus {
  INVITED
  ACTIVE
  REMOVED
}

model IgCommentAutomation {
  id                  Int     @id @default(autoincrement())
  mediaId             String  @unique
  accountId           Int
  commentAutomationId Int     @default(0)
  account             Account @relation(fields: [accountId], references: [id])
}

model IgDmAutomation {
  id             Int     @id @default(autoincrement())
  accountId      Int
  dmAutomationId Int
  account        Account @relation(fields: [accountId], references: [id])
}

//keeps details of leads generation questions to be asked
model Leads {
  id                                Int     @id @default(autoincrement())
  accountId                         Int     @unique
  requirements                      Json
  maxGenerationAttemptsPerProspect  Int
  minGapBetweenPerGenerationAttempt Int
  account                           Account @relation(fields: [accountId], references: [id])
}

model Prospect {
  id                           Int     @id @default(autoincrement())
  userId                       String
  username                     String
  accountId                    Int
  details                      Json
  lastLeadsGenerationAttempt   Int
  totalLeadsGenerationAttempts Int
  account                      Account @relation(fields: [accountId], references: [id])
}

//this has been created so that this could be sent to FE to render a page to display all the featured integrations, config to render the form
model Integration {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  image         String?
  description   String?
  config        Json
  configuraions Configurations[]
}

//this has been created so that user from FE can give us their FB/Gemini account configuration
model Configurations {
  id            Int         @id @default(autoincrement())
  accountId     Int
  integrationId Int
  config        Json
  account       Account     @relation(fields: [accountId], references: [id])
  integration   Integration @relation(fields: [integrationId], references: [id])

  @@unique([accountId, integrationId])
}
